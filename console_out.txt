> customer_data <- read.csv("Mall_Customers.csv")
> dim(customer_data)
[1] 200   5
> str(customer_data)
'data.frame':	200 obs. of  5 variables:
 $ CustomerID            : int  1 2 3 4 5 6 7 8 9 10 ...
 $ Gender                : chr  "Male" "Male" "Female" "Female" ...
 $ Age                   : int  19 21 20 23 31 22 35 23 64 30 ...
 $ Annual.Income..k..    : int  15 15 16 16 17 17 18 18 19 19 ...
 $ Spending.Score..1.100.: int  39 81 6 77 40 76 6 94 3 72 ...
> names(customer_data)
[1] "CustomerID"             "Gender"                 "Age"                    "Annual.Income..k.."    
[5] "Spending.Score..1.100."
> head(customer_data)
  CustomerID Gender Age Annual.Income..k.. Spending.Score..1.100.
1          1   Male  19                 15                     39
2          2   Male  21                 15                     81
3          3 Female  20                 16                      6
4          4 Female  23                 16                     77
5          5 Female  31                 17                     40
6          6 Female  22                 17                     76
> summary(customer_data$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  18.00   28.75   36.00   38.85   49.00   70.00 
> sd(customer_data$Age)
[1] 13.96901
> summary(customer_data$Annual.Income..k..)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  15.00   41.50   61.50   60.56   78.00  137.00 
> sd(customer_data$Annual.Income..k..)
[1] 26.26472
> summary(customer_data$Spending.Score..1.100.)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1.00   34.75   50.00   50.20   73.00   99.00 
> sd(customer_data$Spending.Score..1.100.)
[1] 25.82352
> a=table(customer_data$Gender)
> barplot(a,main="Using BarPlot to display Gender Comparision",
+         ylab="Count",
+         xlab="Gender",
+         col=rainbow(2),
+         legend=rownames(a))
> pct=round(a/sum(a)*100)
> lbs=paste(c("Female","Male")," ",pct,"%",sep=" ")
> library(plotrix)
> pie3D(a,labels=lbs,
+       main="Pie Chart Depicting Ratio of Female and Male")
> summary(customer_data$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  18.00   28.75   36.00   38.85   49.00   70.00 
> hist(customer_data$Age,
+      col="blue",
+      main="Histogram to Show Count of Age Class",
+      xlab="Age Class",
+      ylab="Frequency",
+      labels=TRUE)
> boxplot(customer_data$Age,
+         col="red",
+         main="Boxplot for Descriptive Analysis of Age")
> summary(customer_data$Annual.Income..k..)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  15.00   41.50   61.50   60.56   78.00  137.00 
> hist(customer_data$Annual.Income..k..,
+      col="#660033",
+      main="Histogram for Annual Income",
+      xlab="Annual Income Class",
+      ylab="Frequency",
+      labels=TRUE)
> plot(density(customer_data$Annual.Income..k..),
+      col="yellow",
+      main="Density Plot for Annual Income",
+      xlab="Annual Income Class",
+      ylab="Density")
> polygon(density(customer_data$Annual.Income..k..),
+         col="#ccff66")
> summary(customer_data$Spending.Score..1.100.)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1.00   34.75   50.00   50.20   73.00   99.00 
> boxplot(customer_data$Spending.Score..1.100.,
+         horizontal=TRUE,
+         col="#990000",
+         main="BoxPlot for Descriptive Analysis of Spending Score")
> hist(customer_data$Spending.Score..1.100.,
+      main="HistoGram for Spending Score",
+      xlab="Spending Score Class",
+      ylab="Frequency",
+      col="#6600cc",
+      labels=TRUE)
> library(purrr)
> set.seed(123)
> iss <- function(k) {
+   kmeans(customer_data[,3:5],k,iter.max=100,nstart=100,algorithm="Lloyd" )$tot.withinss
+ }
> k.values <- 1:10
> iss_values <- map_dbl(k.values, iss)
> plot(k.values, iss_values,
+      type="b", pch = 19, frame = FALSE, 
+      xlab="Number of clusters K",
+      ylab="Total intra-clusters sum of squares")
> library(cluster) 
> library(gridExtra)
> library(grid)
> k2<-kmeans(customer_data[,3:5],2,iter.max=100,nstart=50,algorithm="Lloyd")
> s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")))
> k3<-kmeans(customer_data[,3:5],3,iter.max=100,nstart=50,algorithm="Lloyd")
> s3<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")))
> k4<-kmeans(customer_data[,3:5],4,iter.max=100,nstart=50,algorithm="Lloyd")
> s4<-plot(silhouette(k4$cluster,dist(customer_data[,3:5],"euclidean")))
> k5<-kmeans(customer_data[,3:5],5,iter.max=100,nstart=50,algorithm="Lloyd")
> s5<-plot(silhouette(k5$cluster,dist(customer_data[,3:5],"euclidean")))
> k6<-kmeans(customer_data[,3:5],6,iter.max=100,nstart=50,algorithm="Lloyd")
> s6<-plot(silhouette(k6$cluster,dist(customer_data[,3:5],"euclidean")))
> k7<-kmeans(customer_data[,3:5],7,iter.max=100,nstart=50,algorithm="Lloyd")
> s7<-plot(silhouette(k7$cluster,dist(customer_data[,3:5],"euclidean")))
> k8<-kmeans(customer_data[,3:5],8,iter.max=100,nstart=50,algorithm="Lloyd")
> s8<-plot(silhouette(k8$cluster,dist(customer_data[,3:5],"euclidean")))
> k9<-kmeans(customer_data[,3:5],9,iter.max=100,nstart=50,algorithm="Lloyd")
> s9<-plot(silhouette(k9$cluster,dist(customer_data[,3:5],"euclidean")))
> k10<-kmeans(customer_data[,3:5],10,iter.max=100,nstart=50,algorithm="Lloyd")
> s10<-plot(silhouette(k10$cluster,dist(customer_data[,3:5],"euclidean")))
> library(NbClust)
> library(factoextra)
> fviz_nbclust(customer_data[,3:5], kmeans, method = "silhouette")
> set.seed(125)
> stat_gap <- clusGap(customer_data[,3:5], FUN = kmeans, nstart = 25,
+                     K.max = 10, B = 50)
Clustering k = 1,2,..., K.max (= 10): .. done
Bootstrapping, b = 1,2,..., B (= 50)  [one "." per sample]:
.................................................. 50 
> fviz_gap_stat(stat_gap)
> k6<-kmeans(customer_data[,3:5],6,iter.max=100,nstart=50,algorithm="Lloyd")
> k6
K-means clustering with 6 clusters of sizes 35, 22, 38, 44, 22, 39

Cluster means:
       Age Annual.Income..k.. Spending.Score..1.100.
1 41.68571           88.22857               17.28571
2 44.31818           25.77273               20.27273
3 27.00000           56.65789               49.13158
4 56.34091           53.70455               49.38636
5 25.27273           25.72727               79.36364
6 32.69231           86.53846               82.12821

Clustering vector:
  [1] 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 2 5 4 5 2 3 2 5 4 3 3
 [50] 3 4 3 3 4 4 4 4 4 3 4 4 3 4 4 4 3 4 4 3 3 4 4 4 4 4 3 4 3 3 4 4 3 4 4 3 4 4 3 3 4 4 3 4 3 3 3 4 3
 [99] 4 3 3 4 4 3 4 3 4 4 4 4 4 3 3 3 3 3 4 4 4 4 3 3 3 6 3 6 1 6 1 6 1 6 3 6 1 6 1 6 1 6 1 6 3 6 1 6 1
[148] 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6 1 6
[197] 1 6 1 6

Within cluster sum of squares by cluster:
[1] 16690.857  8189.000  7742.895  7607.477  4099.818 13972.359
 (between_SS / total_SS =  81.1 %)

Available components:

[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss" "betweenss"   
[7] "size"         "iter"         "ifault"      
> pcclust=prcomp(customer_data[,3:5],scale=FALSE) 
> summary(pcclust)
Importance of components:
                           PC1     PC2     PC3
Standard deviation     26.4625 26.1597 12.9317
Proportion of Variance  0.4512  0.4410  0.1078
Cumulative Proportion   0.4512  0.8922  1.0000
> pcclust$rotation[,1:2]
                              PC1        PC2
Age                     0.1889742 -0.1309652
Annual.Income..k..     -0.5886410 -0.8083757
Spending.Score..1.100. -0.7859965  0.5739136
> set.seed(1)
> ggplot(customer_data, aes(x =Annual.Income..k.., y = Spending.Score..1.100.)) + 
+   geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
+   scale_color_discrete(name=" ",
+                        breaks=c("1", "2", "3", "4", "5","6"),
+                        labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
+   ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
> kCols=function(vec){cols=rainbow (length (unique (vec)))
+ return (cols[as.numeric(as.factor(vec))])}
> digCluster<-k6$cluster; dignm<-as.character(digCluster); 
> plot(pcclust$x[,1:2], col =kCols(digCluster),pch =19,xlab ="K-means",ylab="classes")
> legend("bottomleft",unique(dignm),fill=unique(kCols(digCluster)))